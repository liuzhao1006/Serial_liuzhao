package com.lz.base.protocol;


import com.lz.base.util.ConvertUtil;

/**
 * 作者      : 刘朝
 * 创建日期  : 2018/12/23 下午8:49
 * 描述     : 通用类型bean 主要作用是封装除了消息内容外的消息定位
 */
public class PushCommon {

    /**
     * 用来描述这个消息作用
     *
     * 报文: (5A A5)   05      80   (00 01)              01      01    7E...E7
     * -------帧头--数据长度--读写操作--地址-- | (数据内容)--页面编号--控件编号--数据内容 | --CRC
     * --------2------1--------1------2----|--------------1-------1--------len
     * ------------------------------------|----PushData.java
     * ------------数据长度为包括读写操作在内的后面所有字节总和.
     */

    /**
     * 这部分只做: 数据长度1, 读写操作1, 地址2, 页面编号1, 控件编号1, 数据内容数组的封装len
     */

    private byte header_one = (byte)0x5A;
    private byte header_two = (byte)0xA5;

    private byte count;//数据长度
    private byte cmdType;//读写操作 指令
    private short cmdAdress;//读写地址 地址

    private byte[] bytes = null;

    short[] crcTabh = {0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
            0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
            0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
            0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,
            0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
            0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
            0x81,0x40,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
            0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
            0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
            0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
            0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,
            0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,
            0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,
            0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,
            0x80,0x41,0x00,0xC1,0x81,0x40};

    short[] crcTabl = {0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,
            0x07,0xC7,0x05,0xC5,0xC4,0x04,0xCC,0x0C,0x0D,0xCD,
            0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,
            0x08,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,
            0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC,0x14,0xD4,
            0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,
            0x11,0xD1,0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,
            0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4,
            0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,
            0x3B,0xFB,0x39,0xF9,0xF8,0x38,0x28,0xE8,0xE9,0x29,
            0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
            0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,
            0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0,0xA0,0x60,
            0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,
            0xA5,0x65,0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,
            0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68,
            0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,
            0x7F,0xBF,0x7D,0xBD,0xBC,0x7C,0xB4,0x74,0x75,0xB5,
            0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
            0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
            0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9C,0x5C,
            0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,
            0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,
            0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C,
            0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,
            0x43,0x83,0x41,0x81,0x80,0x40};


    public PushCommon() {
        }

    public PushCommon unPack(byte[] b){
        PushCommon pushCommon = new PushCommon();
        pushCommon.setCount(b[0]);
        pushCommon.setCmdType(b[1]);
        pushCommon.setCmdAdress((short)(b[3] & 0xff | (b[2] & 0xff) << 8));
        bytes = new byte[b.length - 4];
        System.arraycopy(b,4,this.bytes,0,b.length - 4);
        pushCommon.setBytes(bytes);
        return pushCommon;
    }

    @Override
    public String toString() {
        return "PushCommon{" +
                "count=" + count +
                ", cmdType=" + cmdType +
                ", cmdAdress=" + cmdAdress +
                ", bytes=" + ConvertUtil.bytesToHexString(bytes) +
                '}';
    }

    public byte[] pack(PushData pushData) {
        count = 0;//数据长度
        byte[] pushDataByte = pushData.getBytes();//数据软件
        count += 1;//帧头 5A
        count += 1;//帧头 A5
        count += 1;//数据长度: 数据长度包括指令、数据和校验
        count += 1;//指令 读写寄存器和变量 5种
        count += 2;//地址,cmdAdress
        count += pushDataByte.length;//数据长度
        count += 2;//CRC校验
        System.out.println("组包数据长度 " + count + ", 其中数据长度 " + pushDataByte.length);
        byte[] b = new byte[count];
        b[0] = header_one;
        b[1] = header_two;
        b[2] = count;
        b[3] = cmdType;
        b[4] = (byte)(cmdAdress & 0xff);
        b[5] = (byte)((cmdAdress >> 8) & 0xff);
        System.arraycopy(pushDataByte, 0, b, 4, pushDataByte.length);
        byte[] crcData = getCrcData(pushDataByte);
        b[count - 2] = crcData[0];
        b[count - 1] = crcData[1];
        return b;
    }

    /**
     * crc 校验
     * @param bytes 数据
     * @return 返回校验后的数据
     */
    private byte[] getCrcData(byte[] bytes){
        byte[] b = new byte[2];
        char h = 0xff;
        char l = 0xff;
        for (byte aByte : bytes) {
            int index = h ^ aByte;
            h = (char) (l ^ crcTabh[index]);
            l = (char) crcTabl[index];
        }
        b[0] = (byte)h;
        b[1] = (byte)l;
        return b;
    }

    public short getCount() {
        return count;
    }

    public void setCount(byte count) {
        this.count = count;
    }

    public byte getCmdType() {
        return cmdType;
    }

    public void setCmdType(byte cmdType) {
        this.cmdType = cmdType;
    }

    public short getCmdAdress() {
        return cmdAdress;
    }

    public void setCmdAdress(short cmdAdress) {
        this.cmdAdress = cmdAdress;
    }

    public byte[] getBytes() {
        return bytes;
    }

    public void setBytes(byte[] bytes) {
        this.bytes = bytes;
    }

    public PushCommon(byte cmdType, short cmdAdress) {
        this.cmdType = cmdType;
        this.cmdAdress = cmdAdress;

    }

    public static void main(String[] args) {
//        LogcatHelper.getInstance(this).start();
//        PushCommon common = new PushCommon((byte) 0x0080,(short) 0x1111, (byte)0x0010,(byte)0x0011);
//        byte[] b = {(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,(byte) 0x0001,};
//        System.out.println("原始数据 " + ConvertUtil.bytesToHexString(b));
//        byte[] pack = common.pack(b);
//        System.out.println("组包 " + ConvertUtil.bytesToHexString(pack));
//        PushCommon pushCommon = new PushCommon();
//        System.out.println("解包 " + pushCommon.unPack(pack).toString());
    }
}
